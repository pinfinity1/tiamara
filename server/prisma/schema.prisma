// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model product {
  id                String    @id @default(cuid())
  name              String
  slug              String   
  description       String?
  how_to_use        String?
  caution           String?
  price             Float
  discount_price    Float?
  stock             Int
  sku               String?   @unique
  barcode           String?   @unique
  volume            Float?
  unit              String?
  expiry_date       DateTime?
  manufacture_date  DateTime?
  country_of_origin String?
  attributes        Json?
  skin_type         String[]
  concern           String[]
  product_form      String?
  ingredients       String[]
  tags              String[]
  average_rating    Float?    @default(0)
  review_count      Int?      @default(0)
  soldCount         Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  metaTitle         String?
  metaDescription   String?

  images            Image[]   
  brandId           String?
  brand             Brand?    @relation(fields: [brandId], references: [id])
  categoryId        String?
  category          Category? @relation(fields: [categoryId], references: [id])
  homepageSections  HomepageSection[] 
}

model Image {
  id        String   @id @default(cuid())
  url       String   
  altText   String?  
  title     String?  
  productId String?
  product   product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Brand {
  id              String    @id @default(cuid())
  name            String    @unique
  slug            String    @unique
  logoUrl         String?
  metaTitle       String?
  metaDescription String?
  products        product[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Category {
  id              String    @id @default(cuid())
  name            String    @unique
  slug            String    @unique
  imageUrl        String?
  metaTitle       String?
  metaDescription String?
  products        product[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model FeatureBanner {
  id          String   @id @default(cuid())
  imageUrl    String
  altText     String? 
  linkUrl     String?  @default("/")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HomepageSection {
  id        String    @id @default(cuid())
  title     String
  order     Int       @default(0)
  products  product[] 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}



model User {
  id            String    @id @default(cuid())
  name          String?
  phone         String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cart          Cart?
  addresses     Address[]
  orders        Order[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, size, color])
}

model Coupon {
  id              String   @id @default(cuid())
  code            String   @unique
  discountPercent Float
  startDate       DateTime
  endDate         DateTime
  usageLimit      Int
  usageCount      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orders          Order[]
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  address    String
  city       String
  country    String
  postalCode String
  phone      String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[]

  @@index([userId])
}

model Order {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  addressId     String
  address       Address       @relation(fields: [addressId], references: [id])
  items         OrderItem[]
  couponId      String?
  coupon        Coupon?       @relation(fields: [couponId], references: [id])
  total         Float
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([addressId])
  @@index([couponId])
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id])
  productId       String
  productName     String
  productCategory String
  quantity        Int
  size            String?
  color           String?
  price           Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

enum Role {
  USER
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

enum PaymentMethod {
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
}