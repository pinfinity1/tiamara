// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model product {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  description        String?
  how_to_use         String?
  caution            String?
  price              Float
  discount_price     Float?
  stock              Int
  sku                String?             @unique
  barcode            String?             @unique
  volume             Float?
  unit               String?
  expiry_date        DateTime?
  manufacture_date   DateTime?
  country_of_origin  String?
  attributes         Json?
  skin_type          String[]
  concern            String[]
  product_form       String?
  ingredients        String[]
  tags               String[]
  average_rating     Float?              @default(0)
  review_count       Int?                @default(0)
  soldCount          Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  metaTitle          String?
  metaDescription    String?
  lowStockThreshold  Int?                @default(5)
  images             Image[]
  brandId            String?
  brand              Brand?              @relation(fields: [brandId], references: [id])
  categoryId         String?
  category           Category?           @relation(fields: [categoryId], references: [id])
  homepageSections   HomepageSection[]
  stockHistory       StockHistory[]
  purchaseOrderItems PurchaseOrderItem[]
  wishlistItems      WishlistItem[]
  cartItems          CartItem[] 

  @@map("Product")
}

model StockHistory {
  id        String          @id @default(cuid())
  productId String
  product   product         @relation(fields: [productId], references: [id])
  change    Int
  newStock  Int
  type      StockChangeType
  notes     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String?
  user      User?           @relation(fields: [userId], references: [id])
}

enum StockChangeType {
  INITIAL
  SALE
  RETURN
  PURCHASE
  ADJUSTMENT
  DAMAGE
}

model Supplier {
  id             String          @id @default(cuid())
  name           String          @unique
  contactPerson  String?
  phone          String?
  email          String?         @unique
  address        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id           String              @id @default(cuid())
  supplierId   String
  supplier     Supplier            @relation(fields: [supplierId], references: [id])
  orderDate    DateTime            @default(now())
  expectedDate DateTime?
  status       PurchaseOrderStatus @default(PENDING)
  totalAmount  Float
  notes        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  items        PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId       String
  product         product       @relation(fields: [productId], references: [id])
  quantity        Int
  unitPrice       Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum PurchaseOrderStatus {
  PENDING
  ORDERED
  RECEIVED
  CANCELLED
}

model Image {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  title     String?
  productId String?
  product   product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Brand {
  id               String            @id @default(cuid())
  name             String            @unique
  slug             String            @unique
  logoUrl          String?
  metaTitle        String?
  metaDescription  String?
  products         product[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  homepageSections HomepageSection[]
}

model Category {
  id              String    @id @default(cuid())
  name            String    @unique
  slug            String    @unique
  imageUrl        String?
  metaTitle       String?
  metaDescription String?
  products        product[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model FeatureBanner {
  id              String    @id @default(cuid())
  group           String
  imageUrl        String
  imageUrlMobile  String?   
  linkUrl         String?
  altText         String?
  order           Int       @default(0)
  isActive        Boolean   @default(true)
  
  startDate       DateTime? 
  endDate         DateTime? 

  views           Int       @default(0) 
  clicks          Int       @default(0) 

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum SectionType {
  MANUAL
  DISCOUNTED
  BEST_SELLING
  BRAND
}

model HomepageSection {
  id        String      @id @default(cuid())
  title     String
  order     Int         @default(0)
  type      SectionType @default(MANUAL)
  location  String?     @default("homepage")
  brandId   String?
  brand     Brand?      @relation(fields: [brandId], references: [id])
  products  product[]
  imageUrl  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([brandId])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String
  product    product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId])
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  phone              String?        @unique
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               Role           @default(USER)
  sessions           Session[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  carts              Cart[]
  addresses          Address[]
  orders             Order[]
  stockHistory       StockHistory[]
  wishlist           Wishlist?
  skinType           String?
  skinConcerns       String[]       @default([])
  skincareGoals      String[]       @default([])
  productPreferences String[]       @default([])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Coupon {
  id              String   @id @default(cuid())
  code            String   @unique
  discountPercent Float
  startDate       DateTime
  endDate         DateTime
  usageLimit      Int
  usageCount      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orders          Order[]
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  address    String
  city       String
  country    String
  postalCode String
  phone      String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[]

  @@index([userId])
}

model Order {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  addressId     String
  address       Address       @relation(fields: [addressId], references: [id])
  items         OrderItem[]
  couponId      String?
  coupon        Coupon?       @relation(fields: [couponId], references: [id])
  total         Float
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([addressId])
  @@index([couponId])
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id])
  productId       String
  productName     String
  productCategory String
  quantity        Int
  price           Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

enum Role {
  USER
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

enum PaymentMethod {
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
}
